# Form implementation generated from reading ui file 'transactions.ui'
#
# Created by: PyQt6 UI code generator 6.2.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt6 import QtCore, QtGui, QtWidgets
import mysql.connector
import datetime
import pandas as pd

myconn = mysql.connector.connect(
    host="localhost", user="root", database="backend")
cursor = myconn.cursor()


class Ui_Dialog4():
    c = ''

    def __init__(self, account):
        self.account = account

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1142, 720)
        Dialog.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(Dialog)
        self.horizontalLayoutWidget_2.setGeometry(
            QtCore.QRect(10, 470, 811, 101))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(
            self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")

        self.searchByAmountInput = QtWidgets.QLineEdit(Dialog)

        self.searchByAmountInput.setGeometry(QtCore.QRect(100, 50, 150, 20))
        self.searchByAmountInput.setObjectName("searchByAmountInput")
        self.searchByAmountInput.setStyleSheet(
            "background-color: rgb(173, 216, 230);")
        self.searchByDateTimeInput = QtWidgets.QDateTimeEdit(Dialog)
        self.searchByDateTimeInput.setGeometry(QtCore.QRect(620, 50, 200, 20))
        self.searchByDateTimeInput.setObjectName("searchByDateTimeInput")
        self.searchByDateTimeInput.setStyleSheet(
            "background-color: rgb(173, 216, 230);")
        self.searchByAmountInput.textChanged.connect(
            lambda: self.searchByAmount(Dialog))
        self.searchByDateTimeInput.dateTimeChanged.connect(
            lambda: self.searchByDateTime(Dialog))

        self.label3 = QtWidgets.QLabel(Dialog)
        self.label3.setGeometry(QtCore.QRect(620, 30, 100, 20))
        self.label3.setObjectName("label3")

        self.label4 = QtWidgets.QLabel(Dialog)
        self.label4.setGeometry(QtCore.QRect(100, 30, 150, 20))
        self.label4.setObjectName("label4")

        self.tableWidget1 = QtWidgets.QTableWidget(Dialog)
        self.tableWidget1.setGeometry(QtCore.QRect(450, 150, 581, 200))
        self.tableWidget1.setObjectName("tableWidget1")

        self.tableWidget1.setColumnCount(5)
        self.tableWidget1.setRowCount(10)
        self.tableWidget1.setColumnWidth(0, 110)
        self.tableWidget1.setColumnWidth(1, 80)
        self.tableWidget1.setColumnWidth(2, 80)
        self.tableWidget1.setColumnWidth(3, 130)
        self.tableWidget1.setColumnWidth(4, 150)

        item = QtWidgets.QTableWidgetItem()
        self.tableWidget1.setHorizontalHeaderItem(0, item)
        item2 = QtWidgets.QTableWidgetItem()
        self.tableWidget1.setHorizontalHeaderItem(1, item2)
        item3 = QtWidgets.QTableWidgetItem()
        self.tableWidget1.setHorizontalHeaderItem(2, item3)
        item4 = QtWidgets.QTableWidgetItem()
        self.tableWidget1.setHorizontalHeaderItem(3, item4)
        item5 = QtWidgets.QTableWidgetItem()
        self.tableWidget1.setHorizontalHeaderItem(4, item5)

        self.tableWidget2 = QtWidgets.QTableWidget(Dialog)
        self.tableWidget2.setGeometry(QtCore.QRect(450, 400, 581, 200))
        self.tableWidget2.setObjectName("tableWidget2")

        self.tableWidget2.setColumnCount(5)
        self.tableWidget2.setRowCount(10)
        self.tableWidget2.setColumnWidth(0, 110)
        self.tableWidget2.setColumnWidth(1, 80)
        self.tableWidget2.setColumnWidth(2, 80)
        self.tableWidget2.setColumnWidth(3, 130)
        self.tableWidget2.setColumnWidth(4, 150)

        item = QtWidgets.QTableWidgetItem()
        self.tableWidget2.setHorizontalHeaderItem(0, item)
        item2 = QtWidgets.QTableWidgetItem()
        self.tableWidget2.setHorizontalHeaderItem(1, item2)
        item3 = QtWidgets.QTableWidgetItem()
        self.tableWidget2.setHorizontalHeaderItem(2, item3)
        item4 = QtWidgets.QTableWidgetItem()
        self.tableWidget2.setHorizontalHeaderItem(3, item4)
        item5 = QtWidgets.QTableWidgetItem()
        self.tableWidget2.setHorizontalHeaderItem(4, item5)

        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(30, 180, 300, 300))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("./Images/transactions.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")

        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(80, 100, 400, 40))
        self.label_2.setObjectName("label_2")

        self.horizontalLayoutWidget_1 = QtWidgets.QWidget(Dialog)
        self.horizontalLayoutWidget_1.setGeometry(
            QtCore.QRect(550, 600, 400, 40))
        self.horizontalLayoutWidget_1.setObjectName("horizontalLayoutWidget_1")
        self.horizontalLayout_1 = QtWidgets.QHBoxLayout(
            self.horizontalLayoutWidget_1)
        self.horizontalLayout_1.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_1.setObjectName("horizontalLayout_1")
        self.pushButton_1 = QtWidgets.QPushButton(
            self.horizontalLayoutWidget_1)

        self.pushButton_1.setObjectName("pushButton_1")
        self.pushButton_1.setStyleSheet(
            "font:bold;background-color: rgb(173, 216, 230);")

        self.horizontalLayout_1.addWidget(self.pushButton_1)
        self.pushButton_1.clicked.connect(self.saveCSV)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def saveCSV(self):
        myconn = mysql.connector.connect(
            host="localhost", user="root",  database="backend")
        cursor = myconn.cursor()

        select = "select T.transaction_id, T.amount, T.currency, T.to_account, T.date_time from Transaction T where T.from_account = %s;" % (
            self.account)
        cursor.execute(select)
        data = cursor.fetchall()
        if(data != []):
            data_df = pd.DataFrame(
                data, columns=["Transaction ID", "Amount",  "Currency", "To Account", "Date-Time"])
            data_df.to_csv("../csv_downloads/to_credit_transactions.csv")

        select = "select T.transaction_id, T.amount, T.currency, T.from_account, T.date_time from Transaction T where T.to_account = %s;" % (
            self.account)
        cursor.execute(select)
        data = cursor.fetchall()
        if(data != []):
            data_df = pd.DataFrame(
                data, columns=["Transaction ID", "Amount", "Currency", "From Account", "Date-Time"])
            data_df.to_csv("../csv_downloads/from_credit_transactions.csv")

    def searchByDateTime(self, Dialog):

        second = self.searchByDateTimeInput.time().second()
        minute = self.searchByDateTimeInput.time().minute()
        hour = self.searchByDateTimeInput.time().hour()

        day = self.searchByDateTimeInput.date().day()
        month = self.searchByDateTimeInput.date().month()
        year = self.searchByDateTimeInput.date().year()

        date_time_obj = datetime.datetime(
            year, month, day, hour, minute, second)

        self.tableWidget1.clearContents()
        self.tableWidget2.clearContents()

        select = "select T.transaction_id, T.amount, T.currency, T.to_account, T.date_time from Transaction T where T.from_account = %s and T.date_time = '%s';" % (
            self.account, date_time_obj)
        cursor.execute(select)
        data = cursor.fetchall()

        if(data != []):
            data = list(set(data))
            row = 0
            for d in data:
                transaction_id = d[0]
                self.tableWidget1.setItem(
                    row, 0, QtWidgets.QTableWidgetItem(transaction_id))
                amt = str(d[1])
                self.tableWidget1.setItem(
                    row, 1, QtWidgets.QTableWidgetItem(amt))
                currency = d[2]
                self.tableWidget1.setItem(
                    row, 2, QtWidgets.QTableWidgetItem(currency))
                to_acc = d[3]
                self.tableWidget1.setItem(
                    row, 3, QtWidgets.QTableWidgetItem(to_acc))
                date_time = d[4].strftime("%Y/%m/%d, %H:%M:%S")
                self.tableWidget1.setItem(
                    row, 4, QtWidgets.QTableWidgetItem(date_time))
                row += 1
                if(row == 10):
                    break

        select = "select T.transaction_id, T.amount, T.currency, T.from_account, T.date_time from Transaction T where T.to_account = %s and T.date_time = '%s';" % (
            self.account, date_time_obj)
        cursor.execute(select)
        data = cursor.fetchall()

        if(data != []):
            data = list(set(data))
            row = 0
            for d in data:
                transaction_id = d[0]
                self.tableWidget2.setItem(
                    row, 0, QtWidgets.QTableWidgetItem(transaction_id))
                amt = str(d[1])
                self.tableWidget2.setItem(
                    row, 1, QtWidgets.QTableWidgetItem(amt))
                currency = d[2]
                self.tableWidget2.setItem(
                    row, 2, QtWidgets.QTableWidgetItem(currency))
                from_acc = d[3]
                self.tableWidget2.setItem(
                    row, 3, QtWidgets.QTableWidgetItem(from_acc))
                date_time = d[4].strftime("%Y/%m/%d, %H:%M:%S")
                self.tableWidget2.setItem(
                    row, 4, QtWidgets.QTableWidgetItem(date_time))
                row += 1
                if(row == 10):
                    break

    def searchByAmount(self, Dialog):

        newAmount = self.searchByAmountInput.text()

        self.tableWidget1.clearContents()
        self.tableWidget2.clearContents()
        if newAmount != '':
            newAmount = float(newAmount)

            #select = "SELECT * from Transaction where amount = '%s' and username = 'abc123'" %(newAmount)
            select = "select T.transaction_id, T.amount, T.currency, T.to_account, T.date_time from Transaction T where T.from_account = %s and T.amount = '%s';" % (
                self.account, newAmount)
            cursor.execute(select)
            data = cursor.fetchall()

            if(data != []):
                data = list(set(data))
                row = 0
                for d in data:
                    transaction_id = d[0]
                    self.tableWidget1.setItem(
                        row, 0, QtWidgets.QTableWidgetItem(transaction_id))
                    amt = str(d[1])
                    self.tableWidget1.setItem(
                        row, 1, QtWidgets.QTableWidgetItem(amt))
                    currency = d[2]
                    self.tableWidget1.setItem(
                        row, 2, QtWidgets.QTableWidgetItem(currency))
                    to_acc = d[3]
                    self.tableWidget1.setItem(
                        row, 3, QtWidgets.QTableWidgetItem(to_acc))
                    date_time = d[4].strftime("%Y/%m/%d, %H:%M:%S")
                    self.tableWidget1.setItem(
                        row, 4, QtWidgets.QTableWidgetItem(date_time))
                    row += 1
                    if(row == 10):
                        break

            #select = "SELECT * from Transaction where amount = '%s' and username = 'abc123'" %(newAmount)
            select = "select T.transaction_id, T.amount, T.currency, T.from_account, T.date_time from Transaction T where T.to_account = %s and T.amount = '%s';" % (
                self.account, newAmount)
            cursor.execute(select)
            data = cursor.fetchall()

            if(data != []):
                data = list(set(data))
                row = 0
                for d in data:
                    transaction_id = d[0]
                    self.tableWidget2.setItem(
                        row, 0, QtWidgets.QTableWidgetItem(transaction_id))
                    amt = str(d[1])
                    self.tableWidget2.setItem(
                        row, 1, QtWidgets.QTableWidgetItem(amt))
                    currency = d[2]
                    self.tableWidget2.setItem(
                        row, 2, QtWidgets.QTableWidgetItem(currency))
                    from_acc = d[3]
                    self.tableWidget2.setItem(
                        row, 3, QtWidgets.QTableWidgetItem(from_acc))
                    date_time = d[4].strftime("%Y/%m/%d, %H:%M:%S")
                    self.tableWidget2.setItem(
                        row, 4, QtWidgets.QTableWidgetItem(date_time))
                    row += 1
                    if(row == 10):
                        break

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Credit Transaction"))

        self.pushButton_1.setText(_translate("Dialog", "Save to CSV"))
        # print(self.user_name)
        self.label_2.setText(_translate(
            "Dialog", "Transactions for %s" % (self.account)))
        self.label_2.setFont(QtGui.QFont('Times', 16))
        self.label3.setText(_translate("Dialog", "Search by Date: "))
        self.label4.setText(_translate("Dialog", "Search by Amount: "))
        self.label3.setFont(QtGui.QFont('Times', 14))
        self.label4.setFont(QtGui.QFont('Times', 14))
        self.searchByDateTimeInput.setDisplayFormat("yyyy.MM.dd HH:mm:ss")

        item = self.tableWidget1.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "Transaction ID"))

        item2 = self.tableWidget1.horizontalHeaderItem(1)
        item2.setText(_translate("Dialog", "Amount"))

        item3 = self.tableWidget1.horizontalHeaderItem(2)
        item3.setText(_translate("Dialog", "Currency"))

        item4 = self.tableWidget1.horizontalHeaderItem(3)
        item4.setText(_translate("Dialog", "To Account"))

        item5 = self.tableWidget1.horizontalHeaderItem(4)
        item5.setText(_translate("Dialog", "Date-Time"))

        item = self.tableWidget2.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "Transaction ID"))

        item2 = self.tableWidget2.horizontalHeaderItem(1)
        item2.setText(_translate("Dialog", "Amount"))

        item3 = self.tableWidget2.horizontalHeaderItem(2)
        item3.setText(_translate("Dialog", "Currency"))

        item4 = self.tableWidget2.horizontalHeaderItem(3)
        item4.setText(_translate("Dialog", "From Account"))

        item5 = self.tableWidget2.horizontalHeaderItem(4)
        item5.setText(_translate("Dialog", "Date-Time"))

        select = "select T.transaction_id, T.amount, T.currency, T.to_account, T.date_time from Transaction T where T.from_account = %s;" % (
            self.account)
        cursor.execute(select)
        data = cursor.fetchall()

        if(data != []):
            data = list(set(data))
            row = 0
            self.tableWidget1.clearContents()
            for d in data:
                transaction_id = d[0]
                self.tableWidget1.setItem(
                    row, 0, QtWidgets.QTableWidgetItem(transaction_id))
                amt = str(d[1])
                self.tableWidget1.setItem(
                    row, 1, QtWidgets.QTableWidgetItem(amt))
                currency = d[2]
                self.tableWidget1.setItem(
                    row, 2, QtWidgets.QTableWidgetItem(currency))
                to_acc = d[3]
                self.tableWidget1.setItem(
                    row, 3, QtWidgets.QTableWidgetItem(to_acc))
                date_time = d[4].strftime("%Y/%m/%d, %H:%M:%S")
                self.tableWidget1.setItem(
                    row, 4, QtWidgets.QTableWidgetItem(date_time))
                row += 1
                if(row == 10):
                    break

        select = "select T.transaction_id, T.amount, T.currency, T.from_account, T.date_time from Transaction T where T.to_account = %s;" % (
            self.account)
        cursor.execute(select)
        data = cursor.fetchall()

        if(data != []):
            data = list(set(data))
            row = 0
            self.tableWidget2.clearContents()
            for d in data:
                transaction_id = d[0]
                self.tableWidget2.setItem(
                    row, 0, QtWidgets.QTableWidgetItem(transaction_id))
                amt = str(d[1])
                self.tableWidget2.setItem(
                    row, 1, QtWidgets.QTableWidgetItem(amt))
                currency = d[2]
                self.tableWidget2.setItem(
                    row, 2, QtWidgets.QTableWidgetItem(currency))
                from_acc = d[3]
                self.tableWidget2.setItem(
                    row, 3, QtWidgets.QTableWidgetItem(from_acc))
                date_time = d[4].strftime("%Y/%m/%d, %H:%M:%S")
                self.tableWidget2.setItem(
                    row, 4, QtWidgets.QTableWidgetItem(date_time))
                row += 1
                if(row == 10):
                    break


'''
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec())
'''
